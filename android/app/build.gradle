// android/app/build.gradle  (MODULE-LEVEL)

plugins {
  id "com.android.application"
  id "org.jetbrains.kotlin.android"
  id "com.facebook.react"
  id "com.google.gms.google-services"
}

/** React Native Gradle plugin configuration */
react {
  root = file("../")
  reactNativeDir = file("../node_modules/react-native")
  cliFile = file("../node_modules/react-native/cli.js")
  nodeExecutableAndArgs = ["node"]
}

def enableProguardInReleaseBuilds = false
def jscFlavor = "org.webkit:android-jsc:+"

android {
  namespace "com.lawnqapp"

  // Pull SDK/NDK from the root (android/build.gradle -> ext)
  compileSdkVersion rootProject.ext.compileSdkVersion
  ndkVersion rootProject.ext.ndkVersion

  defaultConfig {
    applicationId "com.lawnqapp"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 46
    versionName "3.0"
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
    release {
      storeFile file('release-key.keystore')
      storePassword 'lawnq@123'
      keyAlias 'my-key-alias'
      keyPassword 'lawnq@123'
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      signingConfig signingConfigs.release
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
    }
  }

  // AGP 8.x -> Java 17
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
  kotlinOptions { jvmTarget = "17" }

  // Some RN libs add custom BuildConfig fields
  buildFeatures { buildConfig = true }
}

dependencies {
  // Managed by the RN Gradle plugin
  implementation("com.facebook.react:react-android")

  // Your existing deps
  implementation "androidx.browser:browser:1.2.0"

  // Firebase via BOM
  implementation(platform("com.google.firebase:firebase-bom:33.6.0"))
  implementation("com.google.firebase:firebase-auth")
  implementation("com.google.firebase:firebase-appcheck-playintegrity")
  implementation("com.google.android.play:integrity:1.4.0")

  // Lottie (Android runtime)
  implementation("com.airbnb.android:lottie:6.4.0")

  // JS engine
  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }
}

/** ✅ Wire autolinked native modules as Gradle deps (no extra PackageList) */
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesAppBuildGradle(project)

/** ✅ Keep only the new plugin’s PackageList (avoid duplicate class) */
tasks.matching { it.name == "generatePackageList" }.configureEach {
  enabled = false
}

/** (Optional) Stabilize autolinking by pre-generating config JSON */
def nodeBin = project.hasProperty("NODE_BINARY") ? project.property("NODE_BINARY") : "node"

tasks.register("rnGenerateAutolinkingJson") {
  def outDir = file("$rootDir/build/generated/autolinking")
  def outFile = file("$outDir/autolinking.json")
  outputs.file(outFile)

  doLast {
    outDir.mkdirs()
    ByteArrayOutputStream stdout = new ByteArrayOutputStream()
    exec {
      workingDir file("../")
      commandLine nodeBin, "node_modules/react-native/cli.js", "config"
      standardOutput = stdout
    }
    outFile.text = stdout.toString("UTF-8")
  }
}

tasks.matching { it.name == "generateAutolinkingPackageList" }.configureEach {
  dependsOn("rnGenerateAutolinkingJson")
}
